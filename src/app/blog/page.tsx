// The code for this file was generated by AI
import { Metadata } from 'next'
import Blog from '@/components/Blog'
import { WordPressPost } from '@/types/blog'

export const metadata: Metadata = {
  title: 'Blog | Tech Insights',
  description: 'Latest articles about technology and development'
}

interface SearchParams {
  page?: string
  per_page?: string
  search?: string
  orderby?: 'date' | 'title' | 'modified'
  order?: 'asc' | 'desc'
  categories?: string
}

interface PageProps {
  params: Promise<{ [key: string]: string }>
  searchParams: Promise<SearchParams>
}

async function getPosts(searchParams: SearchParams) {
  const defaultParams = {
    page: '1',
    per_page: '9',
    orderby: 'date',
    order: 'desc'
  }

  const queryParams = {
    ...defaultParams,
    page: searchParams.page || defaultParams.page,
    per_page: searchParams.per_page || defaultParams.per_page,
    orderby: searchParams.orderby || defaultParams.orderby,
    order: searchParams.order || defaultParams.order,
    search: searchParams.search || '',
    categories: searchParams.categories || ''
  }

  const params = new URLSearchParams()

  Object.entries(queryParams).forEach(([key, value]) => {
    if (value) params.append(key, value)
  })

  const res = await fetch(
    `${process.env.NEXT_PUBLIC_API_ENDPOINT_WORDPRESS}/posts?${params}`,
    {
      next: { revalidate: 3600 }
    }
  )

  if (!res.ok) throw new Error('Failed to fetch posts')

  const totalPages = res.headers.get('X-WP-TotalPages')
  const total = res.headers.get('X-WP-Total')
  const posts: WordPressPost[] = await res.json()

  return {
    posts,
    pagination: {
      total: Number(total),
      totalPages: Number(totalPages),
      currentPage: Number(queryParams.page)
    }
  }
}

async function getCategories() {
  const res = await fetch(
    `${process.env.NEXT_PUBLIC_API_ENDPOINT_WORDPRESS}/categories`,
    {
      next: { revalidate: 3600 }
    }
  )

  if (!res.ok) throw new Error('Failed to fetch categories')
  return res.json()
}

export default async function BlogPage({ searchParams }: PageProps) {
  const searchParamsData = await searchParams

  const { posts, pagination } = await getPosts(searchParamsData)
  const categories = await getCategories()

  return (
    <main className='container'>
      <Blog
        posts={posts}
        categories={categories}
        pagination={pagination}
        searchParams={searchParamsData}
      />
    </main>
  )
}
