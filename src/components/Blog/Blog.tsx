'use client'

// The code for this file was generated by AI
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import Image from 'next/image'
import DOMPurify from 'dompurify'
import '@/components/Blog/Blog.css'
import { Post } from '@/types/blog'

interface Category {
  id: number
  name: string
  count: number
}

interface BlogProps {
  posts: Post[]
  categories: Category[]
  pagination: {
    total: number
    totalPages: number
    currentPage: number
  }
  searchParams: {
    page?: string
    orderby?: string
    order?: string
    categories?: string
  }
}

const Blog = ({ posts, categories, pagination, searchParams }: BlogProps) => {
  const router = useRouter()
  const urlSearchParams = useSearchParams()

  const sanitize = (html: string) => {
    return {
      __html: DOMPurify.sanitize(html, {
        ALLOWED_TAGS: ['p', 'b', 'i', 'em', 'strong', 'a'],
        ALLOWED_ATTR: ['href', 'target']
      })
    }
  }

  const createQueryString = (newParams: Record<string, string>) => {
    const params = new URLSearchParams(urlSearchParams.toString())
    Object.entries(newParams).forEach(([key, value]) => {
      if (value) {
        params.set(key, value)
      } else {
        params.delete(key)
      }
    })
    return params.toString()
  }

  const handleSort = (orderby: string) => {
    const currentOrder = urlSearchParams.get('order')
    const newOrder = currentOrder === 'desc' ? 'asc' : 'desc'

    const queryString = createQueryString({
      orderby,
      order: newOrder
    })
    router.push(`/blog?${queryString}`)
  }

  const handleCategoryClick = (categoryId: number) => {
    const currentCategories =
      urlSearchParams.get('categories')?.split(',') || []
    let newCategories: string[]

    if (currentCategories.includes(String(categoryId))) {
      newCategories = currentCategories.filter(
        (id) => id !== String(categoryId)
      )
    } else {
      newCategories = [...currentCategories, String(categoryId)]
    }

    const queryString = createQueryString({
      categories: newCategories.length ? newCategories.join(',') : '',
      page: '1'
    })

    router.push(`/blog?${queryString}`)
  }

  const selectedCategories = searchParams.categories?.split(',') || []

  return (
    <section className='blog'>
      <div className='blog__filters'>
        <div className='blog__sort'>
          <button onClick={() => handleSort('date')}>
            By Date{' '}
            {searchParams.orderby === 'date' &&
              (searchParams.order === 'desc' ? '↓' : '↑')}
          </button>
          <button onClick={() => handleSort('title')}>
            By Title{' '}
            {searchParams.orderby === 'title' &&
              (searchParams.order === 'desc' ? '↓' : '↑')}
          </button>
        </div>
      </div>

      <div className='blog__categories'>
        {categories.map((category) => (
          <button
            key={category.id}
            onClick={() => handleCategoryClick(category.id)}
            className={`blog__category ${
              selectedCategories.includes(String(category.id)) ? 'active' : ''
            }`}
          >
            {category.name} ({category.count})
          </button>
        ))}
      </div>

      <div className='blog__grid'>
        {posts.map((post) => (
          <article key={post.id} className='blog__card'>
            <Link href={`/blog/${post.slug}`} className='blog__card-link'>
              <div className='blog__card-image'>
                {post.featured_image ? (
                  <Image
                    src={post.featured_image.url}
                    alt={post.featured_image.alt || ''}
                    width={410}
                    height={245}
                    className='blog__card-img'
                    priority={false}
                  />
                ) : (
                  <div className='blog__card-placeholder' />
                )}
              </div>
              <div className='blog__card-content'>
                <h2
                  className='blog__card-title'
                  dangerouslySetInnerHTML={sanitize(post.title.rendered)}
                />
                <div
                  className='blog__card-excerpt'
                  dangerouslySetInnerHTML={sanitize(post.excerpt.rendered)}
                />
                <time className='blog__card-date'>
                  {new Date(post.date).toLocaleDateString('en-US')}
                </time>
              </div>
            </Link>
          </article>
        ))}
      </div>

      {pagination.totalPages > 1 && (
        <div className='blog__pagination'>
          {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map(
            (page) => (
              <Link
                key={page}
                href={`/blog?${createQueryString({ page: page.toString() })}`}
                className={`blog__pagination-link ${
                  page === pagination.currentPage ? 'active' : ''
                }`}
              >
                {page}
              </Link>
            )
          )}
        </div>
      )}
    </section>
  )
}
export default Blog
