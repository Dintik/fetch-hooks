'use client'

// The code for this file was generated by AI
import { useRouter, useSearchParams } from 'next/navigation'
import { WordPressPost } from '@/types/blog'
import BlogCard from '@/components/Blog/Card'
import '@/components/Blog/index.css'
import BlogSort from '@/components/Blog/Sort'
import BlogCategories from '@/components/Blog/Categories'
import BlogPagination from '@/components/Blog/Pagination'

interface Category {
  id: number
  name: string
  count: number
}

interface BlogProps {
  posts: WordPressPost[]
  categories: Category[]
  pagination: {
    total: number
    totalPages: number
    currentPage: number
  }
  searchParams: {
    page?: string
    orderby?: string
    order?: string
    categories?: string
  }
}

const Blog = ({ posts, categories, pagination, searchParams }: BlogProps) => {
  const router = useRouter()
  const urlSearchParams = useSearchParams()

  const createQueryString = (newParams: Record<string, string>) => {
    const params = new URLSearchParams(urlSearchParams.toString())
    Object.entries(newParams).forEach(([key, value]) => {
      if (value) {
        params.set(key, value)
      } else {
        params.delete(key)
      }
    })
    return params.toString()
  }

  const handleSort = (orderby: string) => {
    const currentOrder = urlSearchParams.get('order')
    const newOrder = currentOrder === 'desc' ? 'asc' : 'desc'

    const queryString = createQueryString({
      orderby,
      order: newOrder
    })
    router.push(`/blog?${queryString}`)
  }

  const handleCategoryClick = (categoryId: number) => {
    const currentCategories =
      urlSearchParams.get('categories')?.split(',') || []
    let newCategories: string[]

    if (currentCategories.includes(String(categoryId))) {
      newCategories = currentCategories.filter(
        (id) => id !== String(categoryId)
      )
    } else {
      newCategories = [...currentCategories, String(categoryId)]
    }

    const queryString = createQueryString({
      categories: newCategories.length ? newCategories.join(',') : '',
      page: '1'
    })

    router.push(`/blog?${queryString}`)
  }

  const selectedCategories = searchParams.categories?.split(',') || []

  return (
    <section className='blog'>
      <div className='blog__filters'>
        <BlogSort searchParams={searchParams} onSort={handleSort} />
      </div>

      <BlogCategories
        categories={categories}
        selectedCategories={selectedCategories}
        onCategoryClick={handleCategoryClick}
      />

      <div className='blog__grid'>
        {posts.map((post) => (
          <BlogCard key={post.id} post={post} />
        ))}
      </div>

      {pagination.totalPages > 1 && (
        <BlogPagination
          totalPages={pagination.totalPages}
          currentPage={pagination.currentPage}
          createQueryString={createQueryString}
        />
      )}
    </section>
  )
}
export default Blog
